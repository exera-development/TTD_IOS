//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `car.jpg`.
    static let carJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "car", pathExtension: "jpg")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "car", withExtension: "jpg")`
    static func carJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.carJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `battery_charging`.
    static let battery_charging = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery_charging")
    /// Image `battery_discharging`.
    static let battery_discharging = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery_discharging")
    /// Image `battery_empty`.
    static let battery_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery_empty")
    /// Image `battery_full`.
    static let battery_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery_full")
    /// Image `battery`.
    static let battery = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery")
    /// Image `car.jpg`.
    static let carJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "car.jpg")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `logo_transparent`.
    static let logo_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_transparent")
    /// Image `marker`.
    static let marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker")
    /// Image `moving`.
    static let moving = Rswift.ImageResource(bundle: R.hostingBundle, name: "moving")
    /// Image `radio`.
    static let radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio")
    /// Image `refresh`.
    static let refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh")
    /// Image `unlock`.
    static let unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlock")
    /// Image `wifi`.
    static let wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi")
    /// Image `zap`.
    static let zap = Rswift.ImageResource(bundle: R.hostingBundle, name: "zap")
    
    /// `UIImage(named: "battery", bundle: ..., traitCollection: ...)`
    static func battery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "battery_charging", bundle: ..., traitCollection: ...)`
    static func battery_charging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery_charging, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "battery_discharging", bundle: ..., traitCollection: ...)`
    static func battery_discharging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery_discharging, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "battery_empty", bundle: ..., traitCollection: ...)`
    static func battery_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "battery_full", bundle: ..., traitCollection: ...)`
    static func battery_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery_full, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "car.jpg", bundle: ..., traitCollection: ...)`
    static func carJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_transparent", bundle: ..., traitCollection: ...)`
    static func logo_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_transparent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marker", bundle: ..., traitCollection: ...)`
    static func marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "moving", bundle: ..., traitCollection: ...)`
    static func moving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio", bundle: ..., traitCollection: ...)`
    static func radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "refresh", bundle: ..., traitCollection: ...)`
    static func refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unlock", bundle: ..., traitCollection: ...)`
    static func unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wifi", bundle: ..., traitCollection: ...)`
    static func wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zap", bundle: ..., traitCollection: ...)`
    static func zap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zap, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// en translation: CELL
      /// 
      /// Locales: en
      static let cell = Rswift.StringResource(key: "cell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CHARGING
      /// 
      /// Locales: en
      static let state_charging = Rswift.StringResource(key: "state_charging", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: DISCHARGING
      /// 
      /// Locales: en
      static let state_discharging = Rswift.StringResource(key: "state_discharging", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: EXCELENT
      /// 
      /// Locales: en
      static let excelent = Rswift.StringResource(key: "excelent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: FULL
      /// 
      /// Locales: en
      static let state_full = Rswift.StringResource(key: "state_full", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: GOOD
      /// 
      /// Locales: en
      static let good = Rswift.StringResource(key: "good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: HISTORY
      /// 
      /// Locales: en
      static let history = Rswift.StringResource(key: "history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LIVE
      /// 
      /// Locales: en
      static let live = Rswift.StringResource(key: "live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LOCKED
      /// 
      /// Locales: en
      static let locked = Rswift.StringResource(key: "locked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LOW
      /// 
      /// Locales: en
      static let state_low = Rswift.StringResource(key: "state_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MOVING
      /// 
      /// Locales: en
      static let moving = Rswift.StringResource(key: "moving", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OFFLINE
      /// 
      /// Locales: en
      static let offline = Rswift.StringResource(key: "offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ONLINE
      /// 
      /// Locales: en
      static let online = Rswift.StringResource(key: "online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: STILL
      /// 
      /// Locales: en
      static let still = Rswift.StringResource(key: "still", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: UNLOCKED
      /// 
      /// Locales: en
      static let unlocked = Rswift.StringResource(key: "unlocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: VERY WEAK
      /// 
      /// Locales: en
      static let very_weak = Rswift.StringResource(key: "very_weak", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: WEAK
      /// 
      /// Locales: en
      static let weak = Rswift.StringResource(key: "weak", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: WIFI
      /// 
      /// Locales: en
      static let wifi = Rswift.StringResource(key: "wifi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: CELL
      /// 
      /// Locales: en
      static func cell(_: Void = ()) -> String {
        return NSLocalizedString("cell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CHARGING
      /// 
      /// Locales: en
      static func state_charging(_: Void = ()) -> String {
        return NSLocalizedString("state_charging", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DISCHARGING
      /// 
      /// Locales: en
      static func state_discharging(_: Void = ()) -> String {
        return NSLocalizedString("state_discharging", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: EXCELENT
      /// 
      /// Locales: en
      static func excelent(_: Void = ()) -> String {
        return NSLocalizedString("excelent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FULL
      /// 
      /// Locales: en
      static func state_full(_: Void = ()) -> String {
        return NSLocalizedString("state_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GOOD
      /// 
      /// Locales: en
      static func good(_: Void = ()) -> String {
        return NSLocalizedString("good", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HISTORY
      /// 
      /// Locales: en
      static func history(_: Void = ()) -> String {
        return NSLocalizedString("history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LIVE
      /// 
      /// Locales: en
      static func live(_: Void = ()) -> String {
        return NSLocalizedString("live", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LOCKED
      /// 
      /// Locales: en
      static func locked(_: Void = ()) -> String {
        return NSLocalizedString("locked", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LOW
      /// 
      /// Locales: en
      static func state_low(_: Void = ()) -> String {
        return NSLocalizedString("state_low", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MOVING
      /// 
      /// Locales: en
      static func moving(_: Void = ()) -> String {
        return NSLocalizedString("moving", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OFFLINE
      /// 
      /// Locales: en
      static func offline(_: Void = ()) -> String {
        return NSLocalizedString("offline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ONLINE
      /// 
      /// Locales: en
      static func online(_: Void = ()) -> String {
        return NSLocalizedString("online", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: STILL
      /// 
      /// Locales: en
      static func still(_: Void = ()) -> String {
        return NSLocalizedString("still", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: UNLOCKED
      /// 
      /// Locales: en
      static func unlocked(_: Void = ()) -> String {
        return NSLocalizedString("unlocked", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VERY WEAK
      /// 
      /// Locales: en
      static func very_weak(_: Void = ()) -> String {
        return NSLocalizedString("very_weak", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WEAK
      /// 
      /// Locales: en
      static func weak(_: Void = ()) -> String {
        return NSLocalizedString("weak", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WIFI
      /// 
      /// Locales: en
      static func wifi(_: Void = ()) -> String {
        return NSLocalizedString("wifi", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_transparent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_transparent' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
